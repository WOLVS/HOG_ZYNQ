-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter is
port (
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of image_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "image_filter,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=11.120000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=2,HLS_SYN_DSP=19,HLS_SYN_FF=5372,HLS_SYN_LUT=5523}";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TVALID : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TREADY : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_AXIvideo2Mat_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_AXIvideo2Mat_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_full_n : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_full_n : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_full_n : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal image_filter_CvtColor_U0_ap_start : STD_LOGIC;
    signal image_filter_CvtColor_U0_ap_done : STD_LOGIC;
    signal image_filter_CvtColor_U0_ap_continue : STD_LOGIC;
    signal image_filter_CvtColor_U0_ap_idle : STD_LOGIC;
    signal image_filter_CvtColor_U0_ap_ready : STD_LOGIC;
    signal image_filter_CvtColor_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_CvtColor_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_CvtColor_U0_p_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_CvtColor_U0_p_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_src_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_CvtColor_U0_p_src_data_stream_1_V_empty_n : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_src_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_CvtColor_U0_p_src_data_stream_2_V_empty_n : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_CvtColor_U0_p_dst_data_stream_V_full_n : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal image_filter_Resize_U0_ap_start : STD_LOGIC;
    signal image_filter_Resize_U0_ap_done : STD_LOGIC;
    signal image_filter_Resize_U0_ap_continue : STD_LOGIC;
    signal image_filter_Resize_U0_ap_idle : STD_LOGIC;
    signal image_filter_Resize_U0_ap_ready : STD_LOGIC;
    signal image_filter_Resize_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Resize_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Resize_U0_p_src_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Resize_U0_p_src_data_stream_V_empty_n : STD_LOGIC;
    signal image_filter_Resize_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal image_filter_Resize_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Resize_U0_p_dst_data_stream_V_full_n : STD_LOGIC;
    signal image_filter_Resize_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_start : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_done : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_continue : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_idle : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_ready : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_empty_n : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_read : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TREADY : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal img_0_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_full_n : STD_LOGIC;
    signal img_0_data_stream_0_V_write : STD_LOGIC;
    signal img_0_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_V_read : STD_LOGIC;
    signal img_0_data_stream_1_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_V_full_n : STD_LOGIC;
    signal img_0_data_stream_1_V_write : STD_LOGIC;
    signal img_0_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_V_read : STD_LOGIC;
    signal img_0_data_stream_2_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_V_full_n : STD_LOGIC;
    signal img_0_data_stream_2_V_write : STD_LOGIC;
    signal img_0_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_V_read : STD_LOGIC;
    signal img_1_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_full_n : STD_LOGIC;
    signal img_1_data_stream_0_V_write : STD_LOGIC;
    signal img_1_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_V_read : STD_LOGIC;
    signal img_2_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_2_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_V_full_n : STD_LOGIC;
    signal img_2_data_stream_0_V_write : STD_LOGIC;
    signal img_2_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_V_read : STD_LOGIC;
    signal ap_reg_procdone_image_filter_AXIvideo2Mat_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_image_filter_CvtColor_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_Resize_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_Mat2AXIvideo_8_1080_1920_0_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;

    component image_filter_AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_CvtColor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_Resize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_Mat2AXIvideo_8_1080_1920_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_image_filter_img_0_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_0_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_0_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_1_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_2_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    image_filter_AXIvideo2Mat_U0 : component image_filter_AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_AXIvideo2Mat_U0_ap_start,
        ap_done => image_filter_AXIvideo2Mat_U0_ap_done,
        ap_continue => image_filter_AXIvideo2Mat_U0_ap_continue,
        ap_idle => image_filter_AXIvideo2Mat_U0_ap_idle,
        ap_ready => image_filter_AXIvideo2Mat_U0_ap_ready,
        INPUT_STREAM_TDATA => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDEST,
        rows => image_filter_AXIvideo2Mat_U0_rows,
        cols => image_filter_AXIvideo2Mat_U0_cols,
        img_data_stream_0_V_din => image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_full_n,
        img_data_stream_0_V_write => image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_full_n,
        img_data_stream_1_V_write => image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_full_n,
        img_data_stream_2_V_write => image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_write);

    image_filter_CvtColor_U0 : component image_filter_CvtColor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_CvtColor_U0_ap_start,
        ap_done => image_filter_CvtColor_U0_ap_done,
        ap_continue => image_filter_CvtColor_U0_ap_continue,
        ap_idle => image_filter_CvtColor_U0_ap_idle,
        ap_ready => image_filter_CvtColor_U0_ap_ready,
        rows => image_filter_CvtColor_U0_rows,
        cols => image_filter_CvtColor_U0_cols,
        p_src_data_stream_0_V_dout => image_filter_CvtColor_U0_p_src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n => image_filter_CvtColor_U0_p_src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read => image_filter_CvtColor_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => image_filter_CvtColor_U0_p_src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n => image_filter_CvtColor_U0_p_src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read => image_filter_CvtColor_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => image_filter_CvtColor_U0_p_src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n => image_filter_CvtColor_U0_p_src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read => image_filter_CvtColor_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_V_din => image_filter_CvtColor_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => image_filter_CvtColor_U0_p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => image_filter_CvtColor_U0_p_dst_data_stream_V_write);

    image_filter_Resize_U0 : component image_filter_Resize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Resize_U0_ap_start,
        ap_done => image_filter_Resize_U0_ap_done,
        ap_continue => image_filter_Resize_U0_ap_continue,
        ap_idle => image_filter_Resize_U0_ap_idle,
        ap_ready => image_filter_Resize_U0_ap_ready,
        rows => image_filter_Resize_U0_rows,
        cols => image_filter_Resize_U0_cols,
        p_src_data_stream_V_dout => image_filter_Resize_U0_p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n => image_filter_Resize_U0_p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read => image_filter_Resize_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => image_filter_Resize_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => image_filter_Resize_U0_p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => image_filter_Resize_U0_p_dst_data_stream_V_write);

    image_filter_Mat2AXIvideo_8_1080_1920_0_U0 : component image_filter_Mat2AXIvideo_8_1080_1920_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_start,
        ap_done => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_done,
        ap_continue => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_continue,
        ap_idle => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_idle,
        ap_ready => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_ready,
        rows => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_rows,
        cols => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_cols,
        img_data_stream_V_dout => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_dout,
        img_data_stream_V_empty_n => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_empty_n,
        img_data_stream_V_read => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_read,
        OUTPUT_STREAM_TDATA => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TDEST);

    img_0_data_stream_0_V_U : component FIFO_image_filter_img_0_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_0_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_0_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_V_full_n,
        if_write => img_0_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_V_dout,
        if_empty_n => img_0_data_stream_0_V_empty_n,
        if_read => img_0_data_stream_0_V_read);

    img_0_data_stream_1_V_U : component FIFO_image_filter_img_0_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_data_stream_1_V_U_ap_dummy_ce,
        if_write_ce => img_0_data_stream_1_V_U_ap_dummy_ce,
        if_din => img_0_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_V_full_n,
        if_write => img_0_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_V_dout,
        if_empty_n => img_0_data_stream_1_V_empty_n,
        if_read => img_0_data_stream_1_V_read);

    img_0_data_stream_2_V_U : component FIFO_image_filter_img_0_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_data_stream_2_V_U_ap_dummy_ce,
        if_write_ce => img_0_data_stream_2_V_U_ap_dummy_ce,
        if_din => img_0_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_V_full_n,
        if_write => img_0_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_V_dout,
        if_empty_n => img_0_data_stream_2_V_empty_n,
        if_read => img_0_data_stream_2_V_read);

    img_1_data_stream_0_V_U : component FIFO_image_filter_img_1_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_1_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_1_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_1_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_V_full_n,
        if_write => img_1_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_V_dout,
        if_empty_n => img_1_data_stream_0_V_empty_n,
        if_read => img_1_data_stream_0_V_read);

    img_2_data_stream_0_V_U : component FIFO_image_filter_img_2_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_2_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_2_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_2_data_stream_0_V_din,
        if_full_n => img_2_data_stream_0_V_full_n,
        if_write => img_2_data_stream_0_V_write,
        if_dout => img_2_data_stream_0_V_dout,
        if_empty_n => img_2_data_stream_0_V_empty_n,
        if_read => img_2_data_stream_0_V_read);





    -- ap_reg_procdone_image_filter_AXIvideo2Mat_U0 assign process. --
    ap_reg_procdone_image_filter_AXIvideo2Mat_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_AXIvideo2Mat_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_AXIvideo2Mat_U0 <= ap_const_logic_0;
                elsif ((image_filter_AXIvideo2Mat_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_image_filter_AXIvideo2Mat_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_CvtColor_U0 assign process. --
    ap_reg_procdone_image_filter_CvtColor_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_CvtColor_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_CvtColor_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_CvtColor_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_CvtColor_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_Mat2AXIvideo_8_1080_1920_0_U0 assign process. --
    ap_reg_procdone_image_filter_Mat2AXIvideo_8_1080_1920_0_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_Mat2AXIvideo_8_1080_1920_0_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_Mat2AXIvideo_8_1080_1920_0_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_Mat2AXIvideo_8_1080_1920_0_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_Resize_U0 assign process. --
    ap_reg_procdone_image_filter_Resize_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_Resize_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_Resize_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_Resize_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_Resize_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    INPUT_STREAM_TREADY <= image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TREADY;
    OUTPUT_STREAM_TDATA <= image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TDATA;
    OUTPUT_STREAM_TDEST <= image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TDEST;
    OUTPUT_STREAM_TID <= image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TID;
    OUTPUT_STREAM_TKEEP <= image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TKEEP;
    OUTPUT_STREAM_TLAST <= image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TLAST;
    OUTPUT_STREAM_TSTRB <= image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TSTRB;
    OUTPUT_STREAM_TUSER <= image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TUSER;
    OUTPUT_STREAM_TVALID <= image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TVALID;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(image_filter_AXIvideo2Mat_U0_ap_idle, image_filter_CvtColor_U0_ap_idle, image_filter_Resize_U0_ap_idle, image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_idle)
    begin
        if (((image_filter_AXIvideo2Mat_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = image_filter_CvtColor_U0_ap_idle) and (ap_const_logic_1 = image_filter_Resize_U0_ap_idle) and (ap_const_logic_1 = image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_idle))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_done)
    begin
        if ((ap_const_logic_1 = image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_top_allready <= image_filter_AXIvideo2Mat_U0_ap_ready;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDATA <= INPUT_STREAM_TDATA;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDEST <= INPUT_STREAM_TDEST;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TID <= INPUT_STREAM_TID;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TKEEP <= INPUT_STREAM_TKEEP;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TLAST <= INPUT_STREAM_TLAST;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TSTRB <= INPUT_STREAM_TSTRB;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TUSER <= INPUT_STREAM_TUSER;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TVALID <= INPUT_STREAM_TVALID;
    image_filter_AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    image_filter_AXIvideo2Mat_U0_ap_start <= (ap_start);
    
    image_filter_AXIvideo2Mat_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_AXIvideo2Mat_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_AXIvideo2Mat_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_AXIvideo2Mat_U0_cols_i) := cols(32-1-image_filter_AXIvideo2Mat_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_AXIvideo2Mat_U0_cols <= resvalue(11-1 downto 0);
    end process;

    image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_full_n <= img_0_data_stream_0_V_full_n;
    image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_full_n <= img_0_data_stream_1_V_full_n;
    image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_full_n <= img_0_data_stream_2_V_full_n;
    
    image_filter_AXIvideo2Mat_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_AXIvideo2Mat_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_AXIvideo2Mat_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_AXIvideo2Mat_U0_rows_i) := rows(32-1-image_filter_AXIvideo2Mat_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_AXIvideo2Mat_U0_rows <= resvalue(11-1 downto 0);
    end process;

    image_filter_CvtColor_U0_ap_continue <= ap_const_logic_1;
    image_filter_CvtColor_U0_ap_start <= ap_start;
    
    image_filter_CvtColor_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_CvtColor_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_CvtColor_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_CvtColor_U0_cols_i) := cols(32-1-image_filter_CvtColor_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_CvtColor_U0_cols <= resvalue(11-1 downto 0);
    end process;

    image_filter_CvtColor_U0_p_dst_data_stream_V_full_n <= img_1_data_stream_0_V_full_n;
    image_filter_CvtColor_U0_p_src_data_stream_0_V_dout <= img_0_data_stream_0_V_dout;
    image_filter_CvtColor_U0_p_src_data_stream_0_V_empty_n <= img_0_data_stream_0_V_empty_n;
    image_filter_CvtColor_U0_p_src_data_stream_1_V_dout <= img_0_data_stream_1_V_dout;
    image_filter_CvtColor_U0_p_src_data_stream_1_V_empty_n <= img_0_data_stream_1_V_empty_n;
    image_filter_CvtColor_U0_p_src_data_stream_2_V_dout <= img_0_data_stream_2_V_dout;
    image_filter_CvtColor_U0_p_src_data_stream_2_V_empty_n <= img_0_data_stream_2_V_empty_n;
    
    image_filter_CvtColor_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_CvtColor_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_CvtColor_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_CvtColor_U0_rows_i) := rows(32-1-image_filter_CvtColor_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_CvtColor_U0_rows <= resvalue(11-1 downto 0);
    end process;

    image_filter_Mat2AXIvideo_8_1080_1920_0_U0_OUTPUT_STREAM_TREADY <= OUTPUT_STREAM_TREADY;
    image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_continue <= ap_sig_hs_continue;
    image_filter_Mat2AXIvideo_8_1080_1920_0_U0_ap_start <= ap_start;
    
    image_filter_Mat2AXIvideo_8_1080_1920_0_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Mat2AXIvideo_8_1080_1920_0_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Mat2AXIvideo_8_1080_1920_0_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_Mat2AXIvideo_8_1080_1920_0_U0_cols_i) := cols(32-1-image_filter_Mat2AXIvideo_8_1080_1920_0_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Mat2AXIvideo_8_1080_1920_0_U0_cols <= resvalue(11-1 downto 0);
    end process;

    image_filter_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_dout <= img_2_data_stream_0_V_dout;
    image_filter_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_empty_n <= img_2_data_stream_0_V_empty_n;
    
    image_filter_Mat2AXIvideo_8_1080_1920_0_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Mat2AXIvideo_8_1080_1920_0_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Mat2AXIvideo_8_1080_1920_0_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_Mat2AXIvideo_8_1080_1920_0_U0_rows_i) := rows(32-1-image_filter_Mat2AXIvideo_8_1080_1920_0_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Mat2AXIvideo_8_1080_1920_0_U0_rows <= resvalue(11-1 downto 0);
    end process;

    image_filter_Resize_U0_ap_continue <= ap_const_logic_1;
    image_filter_Resize_U0_ap_start <= ap_start;
    
    image_filter_Resize_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Resize_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Resize_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_Resize_U0_cols_i) := cols(32-1-image_filter_Resize_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Resize_U0_cols <= resvalue(11-1 downto 0);
    end process;

    image_filter_Resize_U0_p_dst_data_stream_V_full_n <= img_2_data_stream_0_V_full_n;
    image_filter_Resize_U0_p_src_data_stream_V_dout <= img_1_data_stream_0_V_dout;
    image_filter_Resize_U0_p_src_data_stream_V_empty_n <= img_1_data_stream_0_V_empty_n;
    
    image_filter_Resize_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Resize_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Resize_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_Resize_U0_rows_i) := rows(32-1-image_filter_Resize_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Resize_U0_rows <= resvalue(11-1 downto 0);
    end process;

    img_0_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_0_V_din <= image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_din;
    img_0_data_stream_0_V_read <= image_filter_CvtColor_U0_p_src_data_stream_0_V_read;
    img_0_data_stream_0_V_write <= image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_write;
    img_0_data_stream_1_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_1_V_din <= image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_din;
    img_0_data_stream_1_V_read <= image_filter_CvtColor_U0_p_src_data_stream_1_V_read;
    img_0_data_stream_1_V_write <= image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_write;
    img_0_data_stream_2_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_2_V_din <= image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_din;
    img_0_data_stream_2_V_read <= image_filter_CvtColor_U0_p_src_data_stream_2_V_read;
    img_0_data_stream_2_V_write <= image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_write;
    img_1_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_1_data_stream_0_V_din <= image_filter_CvtColor_U0_p_dst_data_stream_V_din;
    img_1_data_stream_0_V_read <= image_filter_Resize_U0_p_src_data_stream_V_read;
    img_1_data_stream_0_V_write <= image_filter_CvtColor_U0_p_dst_data_stream_V_write;
    img_2_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_2_data_stream_0_V_din <= image_filter_Resize_U0_p_dst_data_stream_V_din;
    img_2_data_stream_0_V_read <= image_filter_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_read;
    img_2_data_stream_0_V_write <= image_filter_Resize_U0_p_dst_data_stream_V_write;
end behav;
